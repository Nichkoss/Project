openapi: "3.0.2"
info:
  title: API Title
  version: "1.0"
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: Person
    description: Operations with user
  - name: Passenger
    description: Operations with passenger
  - name: Book
    description: Operations with book
  - name: Ticket
    description: Operations with ticket
  - name: Seat
    description: Operations with seat
  - name: Flight
    description: Operations with flight

paths:
  /users:
    post:
      tags:
        - Person
      summary: Create user
      description: Add new client or manager account
      requestBody:
        description: New client or manager info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '201':
          description: New user was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '409':
          description: The user already exists
        '412':
          description: Invalid input data
  /users/{id}:
    put:
      tags:
        - Person
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Update an existing user
      description: Update personal information by id
      parameters:
        - name: id
          in: path
          description: id of user to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated personal info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: The user data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Invalid user id, user not found
        '412':
          description: Invalid input data
    delete:
      tags:
        - Person
      security:
        - cookieAuth_manager: []
      summary: Delete an existing user
      description: Delete an existing user by id
      parameters:
        - name: id
          in: path
          description: id of user to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The user was successfully deleted
        '404':
          description: Invalid user id, user not found
    get:
      tags:
        - Person
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get user info
      description: Get all info about an existing user by id
      parameters:
        - name: id
          in: path
          description: id of user to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Invalid user id, user not found
  /users/{id}/newstatus:
    put:
      tags:
        - Person
      security:
        - cookieAuth_manager: []
      summary: Give a user manager rights
      description: Update user role as 'manager' for user by id
      parameters:
        - name: id
          in: path
          description: id of user to be given manager rights
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User role was successfully updated
        '404':
          description: Invalid user id, user not found
  /users/getall:
    get:
      tags:
        - Person
      security:
        - cookieAuth_manager: []
      summary: Get all users
      description: get the list of all users and their personal info
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
  /users/login:
    post:
      tags:
        - Person
      security:
        - basicAuth: []
      summary: Log user into the system
      description: Create a new session for an existing user
#      requestBody:
#        description: Authorization information
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                email:
#                  type: string
#                  example: m.anderson@gmil.com
#                password:
#                  type: string
#                  example: 12345hhh
      responses:
        '201':
          description: Session successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '412':
          description: Invalid input data
        '401':
          description: User not authenticated
  /users/logout:
    delete:
      tags:
        - Person
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Log user out of the system
      description: End session for an existing user
      responses:
        '200':
          description: Session successfully ended

  /bookings/getall:
    get:
      tags:
        - Book
      security:
        - cookieAuth_manager: []
      summary: Get all bookings
      description: get the list of all bookings
      responses:
        '200':
          description: List of all bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
  /bookings:
    post:
      tags:
        - Book
      security:
        - cookieAuth_client: []
      summary: Add new book
      description: Add book
      requestBody:
        description: New book info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      responses:
        '201':
          description: New book was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '412':
          description: Invalid input data
  /bookings/{id}:
    put:
      tags:
        - Book
      security:
        - cookieAuth_client: []
      summary: Update an existing book
      description: Update book information by id
      parameters:
        - name: id
          in: path
          description: id of book to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated book info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: The book data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Invalid book id, book not found
        '412':
          description: Invalid input data
    get:
      tags:
        - Book
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get book info
      description: Get all info about an existing book by id
      parameters:
        - name: id
          in: path
          description: id of book to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Book was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Invalid book id, book not found
    delete:
      tags:
        - Book
      security:
        - cookieAuth_client: []
      summary: Delete an existing book
      description: Delete book by id
      parameters:
        - name: id
          in: path
          description: id of book to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The book was successfully deleted
        '404':
          description: Invalid book id, book not found
  /bookings/{id}/getdiscount:
    get:
      tags:
        - Book
      security:
        - cookieAuth_client: []
      summary: Get discount
      description: Get discount for book
      parameters:
        - name: id
          in: path
          description: id of book to set discount
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Discount was successfully returned
          content:
            application/json:
              schema:
                description: Discount and new price
                type: object
                properties:
                  discount:
                    type: integer
                    example: 10
                  price:
                    type: number
                    format: double
                    example: 142.2
        '404':
          description: Invalid book id, book not found
  /passengers/getall:
    get:
      tags:
        - Passenger
      security:
        - cookieAuth_manager: []
      summary: Get all passengers
      description: get the list of all passengers
      responses:
        '200':
          description: List of all passengers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Passenger'
  /passengers:
    post:
      tags:
        - Passenger
      security:
        - cookieAuth_client: []
      summary: Add new passenger
      description: Add passenger information (firstname, lastname, birthdate, pass_ser, pass_num, expirydate, email)
      requestBody:
        description: New passenger info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
        required: true
      responses:
        '201':
          description: New passenger was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
        '412':
          description: Invalid input data
  /passengers/{id}:
    put:
      tags:
        - Passenger
      security:
        - cookieAuth_client: []
      summary: Update an existing passenger information
      description: Update personal information by id
      parameters:
        - name: id
          in: path
          description: id of passenger to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated passenger info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
      responses:
        '200':
          description: The passenger data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
        '404':
          description: Invalid passenger id, passenger not found
        '412':
          description: Invalid input data
    get:
      tags:
        - Passenger
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get passenger info
      description: Get all info about an existing passenger by id
      parameters:
        - name: id
          in: path
          description: id of passenger to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Passenger was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
        '404':
          description: Invalid passenger id, passenger not found
  /tickets/getall:
    get:
      tags:
        - Ticket
      security:
        - cookieAuth_manager: []
      summary: Get all tickets
      description: get the list of all tickets
      responses:
        '200':
          description: List of all tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
  /tickets:
    post:
      tags:
        - Ticket
      security:
        - cookieAuth_client: []
      summary: Add new ticket
      description: Add ticket information ()
      requestBody:
        description: New ticket info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '201':
          description: New ticket was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '412':
          description: Invalid input data
  /tickets/{id}:
    put:
      tags:
        - Ticket
      security:
        - cookieAuth_client: []
      summary: Update an existing ticket information
      description: Update ticket information by id
      parameters:
        - name: id
          in: path
          description: id of ticket to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated ticket info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: The ticket data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Invalid ticket id, ticket not found
        '412':
          description: Invalid input data
    get:
      tags:
        - Ticket
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get ticket info
      description: Get all info about an existing ticket by id
      parameters:
        - name: id
          in: path
          description: id of ticket to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Ticket was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Invalid ticket id, ticket not found
    delete:
      tags:
        - Ticket
      security:
        - cookieAuth_client: []
      summary: Delete an existing ticket
      description: Delete ticket by id
      parameters:
        - name: id
          in: path
          description: id of ticket to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The ticket was successfully deleted
        '404':
          description: Invalid ticket id, ticket not found
  /seats/getall:
    get:
      tags:
        - Seat
      security:
        - cookieAuth_manager: []
      summary: Get all seats
      description: get the list of all seats
      responses:
        '200':
          description: List of all seats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
  /seats:
    post:
      tags:
        - Seat
      security:
        - cookieAuth_manager: []
      summary: Add new seat
      description: Add seat information (seat number, available, price, flight id)
      requestBody:
        description: New seat info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seat'
        required: true
      responses:
        '201':
          description: New seat was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seat'
        '412':
          description: Invalid input data
  /seats/{id}:
    put:
      tags:
        - Seat
      security:
        - cookieAuth_manager: []
      summary: Update an existing seat information
      description: Update seat information by id
      parameters:
        - name: id
          in: path
          description: id of seat to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated seat info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seat'
      responses:
        '200':
          description: The seat data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seat'
        '404':
          description: Invalid seat id, seat not found
        '412':
          description: Invalid input data
    get:
      tags:
        - Seat
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get seat info
      description: Get all info about an existing seat by id
      parameters:
        - name: id
          in: path
          description: id of seat to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: seat was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seat'
        '404':
          description: Invalid seat id, seat not found
    delete:
      tags:
        - Seat
      security:
        - cookieAuth_manager: []
      summary: Delete an existing seat
      description: Delete seat by id
      parameters:
        - name: id
          in: path
          description: id of seat to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The seat was successfully deleted
        '404':
          description: Invalid seat id, seat not found
  /flights/getall:
    get:
      tags:
        - Flight
      security:
        - cookieAuth_manager: []
      summary: Get all flights
      description: get the list of all flights
      responses:
        '200':
          description: List of all flights
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'
  /flights:
    post:
      tags:
        - Flight
      security:
        - cookieAuth_manager: []
      summary: Add new flight
      description: Add flight information (city from, city to, max number of seats, flight date)
      requestBody:
        description: New flight info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
        required: true
      responses:
        '201':
          description: New flight was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '412':
          description: Invalid input data
  /flights/{id}:
    put:
      tags:
        - Flight
      security:
        - cookieAuth_manager: []
      summary: Update an existing flight information
      description: Update flight information by id
      parameters:
        - name: id
          in: path
          description: id of flight to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated flight info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        '200':
          description: The flight data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '404':
          description: Invalid flight id, flight not found
        '412':
          description: Invalid input data
    get:
      tags:
        - Flight
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get flight info
      description: Get all info about an existing flight by id
      parameters:
        - name: id
          in: path
          description: id of flight to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Flight was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '404':
          description: Invalid flight id, flight not found
    delete:
      tags:
        - Flight
      security:
        - cookieAuth_manager: []
      summary: Delete an existing flight
      description: Delete flight by id
      parameters:
        - name: id
          in: path
          description: id of flight to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The flight was successfully deleted
        '404':
          description: Invalid flight id, flight not found
  /flights/{id}/GetFreeseats:
    get:
      tags:
        - Flight
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get free seats
      description: Get information about free seats of flight
      parameters:
        - name: id
          in: path
          description: id of flight to get number of free seats
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Number of free seats was successfully returned
          content:
            application/json:
              schema:
                description: Number of free seats
                type: object
                properties:
                  freeseats:
                    type: integer
                    example: 50
        '404':
          description: Invalid flight id, flight not found
  /flight/{id}/GetUsedseats:
    get:
      tags:
        - Flight
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get used seats
      description: Get information about used seats of flight
      parameters:
        - name: id
          in: path
          description: id of flight to get number of used seats
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Number of used seats was successfully returned
          content:
            application/json:
              schema:
                description: Number of used seats
                type: object
                properties:
                  usedseats:
                    type: integer
                    example: 100
        '404':
          description: Invalid flight id, flight not found
components:
  schemas:
    Person:
      type: object
      properties:
        idperson:
          type: integer
          format: int64
          readOnly: true
          example: 1
        email:
          type: string
          example: jane.smith@gmail.com
          description: The email address of user, must be in the format of an email address, like example@gmail.com
        password:
          type: string
          writeOnly: true
          example: 1234
        creation_time:
          type: string
          format: timestamp
          example: 2022-08-30 00:00
        role:
          type: string
          example: client
          description: if user is a manager, this property must be "manager"
        firstname:
          type: string
          example: Jane
        lastname:
          type: string
          example: Smith
        birthdate:
          type: string
          format: date
          example: 2001-01-01
        pass_ser:
          type: string
          example: FN
        pass_num:
          type: integer
          format: int64
          example: 3378
        expirydate:
          type: string
          format: date
          example: 2032-08-30
    Passenger:
      type: object
      properties:
        idpassenger:
          type: integer
          format: int64
          readOnly: true
          example: 1
        firstname:
          type: string
          example: Jane
        lastname:
          type: string
          example: Smith
        birthdate:
          type: string
          format: date
          example: 2001-01-01
        email:
          type: string
          example: jane.smith@gmail.com
          description: The email address of user, must be in the format of an email address, like example@gmail.com.
        pass_ser:
          type: string
          example: FN
        pass_num:
          type: integer
          format: int64
          example: 3378
        expirydate:
          type: string
          format: date
          example: 2032-08-30

#        user:
#          $ref: '#/components/schemas/User'
    Booking:
      type: object
      properties:
        idbook:
          type: integer
          format: int64
          readOnly: true
          example: 1
        total_price:
          type: number
          format: double
          example: 157.99
        personid:
          $ref: '#/components/schemas/Person'
        ticket_list:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
    Ticket:
      type: object
      properties:
        idticket:
          type: integer
          format: int64
          readOnly: true
          example: 1
        extra_lug:
          type: integer
          format: int64 # 32?
          example: 3
        creation_date:
          type: string
          format: timestamp
          example: 2022-08-30 00:00
        seatid:
          $ref: '#/components/schemas/Seat'
        bookingid:
          $ref: '#/components/schemas/Booking'
        passengerid:
          $ref: '#/components/schemas/Passenger'
    Seat:
      type: object
      properties:
        idseat:
          type: integer
          format: int64
          readOnly: true
          example: 1
        seatnumber:
          type: integer
          format: int64 # 32?
          example: 1
        available:
          type: boolean
          example: 1
          description: if seat is available, this property must be equal to 1
        price:
          type: number
          format: float
          example: 149.99
        flightid:
          $ref: '#/components/schemas/Flight'
    Flight:
      type: object
      properties:
        idflight:
          type: integer
          format: int64
          readOnly: true
          example: 1
        city_from:
          type: string
          example: Lviv
        city_to:
          type: string
          example: London
        airport_from:
          type: string
          example: Lviv National Airport
        airport_to:
          type: string
          example: London Airport
        max_seats:
          type: integer
          format: int64 # int32
          example: 150
        flight_date:
          type: string
          format: timestamp
          example: 2022-10-30 00:30
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth_client:
      description: Client authentication
      type: apiKey
      in: cookie
      name: JSESSIONID
    cookieAuth_manager:
      description: Manager authentication
      type: apiKey
      in: cookie
      name: JSESSIONID
#  securitySchemes:
#    manager_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: https://airline_lanchuv/oauth/authorize
#          scopes:
#            write: add, update and delete users, orders, menu items and products
#            read: read info about users, orders, menu items and products